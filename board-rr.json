{
	"info": {
		"_postman_id": "396077f1-80b5-45b0-a1bf-b26855c2c478",
		"name": "Board",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27688809",
		"_collection_link": "https://lively-comet-905188.postman.co/workspace/The-Originals~84b237fe-737d-4f44-bcb8-196c1c02072d/collection/27688809-396077f1-80b5-45b0-a1bf-b26855c2c478?action=share&source=collection_link&creator=27688809"
	},
	"item": [
		{
			"name": "Login ADMIN Qa.Coders",
			"item": [
				{
					"name": "Login ADMIN Qa.Coders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\",pm.variables.replaceIn(JSON.parse(responseBody).token));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"sysadmin@qacoders.com\",\r\n    \"password\": \"1234@Test\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login Novo ADMIN",
			"item": [
				{
					"name": "Criar Novo Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId\",pm.variables.replaceIn(JSON.parse(responseBody).user._id));\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"function gerarCPF() {\r",
									"    let num = Math.floor(Math.random() * 999999999);\r",
									"    let cpf = num.toString().padStart(9, '0');\r",
									"    cpf += calcularDigito(cpf);\r",
									"    cpf += calcularDigito(cpf);\r",
									"\r",
									"    return cpf;\r",
									"}\r",
									"\r",
									"function calcularDigito(cpf) {\r",
									"    let soma = 0;\r",
									"    for (let i = 0; i < cpf.length; i++) {\r",
									"        soma += parseInt(cpf[i]) * ((cpf.length + 1) - i);\r",
									"    }\r",
									"    let resto = (soma * 10) % 11;\r",
									"    return (resto > 9) ? '0' : resto.toString();\r",
									"}\r",
									"\r",
									"// Definir a variável no Postman\r",
									"pm.environment.set(\"cpf\", gerarCPF());\r",
									"\r",
									"function generateRandomPassword() {\r",
									"  const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"  const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const specialChars = '!@#$%^&*()_+-=[]{}|;:,.<>?';\r",
									"  const numbers = '0123456789';\r",
									"  const allChars = uppercaseChars + lowercaseChars + specialChars + numbers;\r",
									"\r",
									"  const getRandomChar = (charSet) => charSet[Math.floor(Math.random() * charSet.length)];\r",
									"\r",
									"  const passwordLength = Math.floor(Math.random() * 5) + 8; // Entre 8 e 12 dígitos\r",
									"\r",
									"  const password = [\r",
									"    getRandomChar(uppercaseChars),\r",
									"    getRandomChar(lowercaseChars),\r",
									"    getRandomChar(specialChars),\r",
									"    getRandomChar(numbers),\r",
									"    ...Array.from({ length: passwordLength - 4 }, () => getRandomChar(allChars))\r",
									"  ].sort(() => Math.random() - 0.5).join('');\r",
									"\r",
									"  pm.environment.set('password', password);\r",
									"}\r",
									"\r",
									"generateRandomPassword();\r",
									"\r",
									"\r",
									"function removerAcentos(str) {\r",
									"  return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
									"}\r",
									"\r",
									"function generateFullName() {\r",
									"  const names = [\r",
									"    \"Amelia\", \"Bernardo\", \"Cecilia\", \"Dante\", \"Elisa\", \"Fernando\", \"Giovanna\", \"Hugo\",\r",
									"    \"Íris\", \"João\", \"Larissa\", \"Matheus\", \"Nícolas\", \"Otávio\", \"Patrícia\", \"Quentin\",\r",
									"    \"Renata\", \"Sofia\", \"Thiago\", \"Valentina\", \"Yasmin\", \"Zacarias\", \"Luna\", \"Enzo\",\r",
									"    \"Vitória\", \"Ricardo\", \"Mariana\", \"Lucas\", \"Beatriz\", \"Eduardo\", \"Camila\", \"Gabriel\",\r",
									"    \"Helena\", \"Ian\", \"Jade\", \"Kaique\", \"Lorena\", \"Miguel\", \"Natalia\", \"Oliver\",\r",
									"    \"Pietra\", \"Quezia\", \"Raul\", \"Stella\", \"Tales\", \"Ursula\", \"Vinicius\", \"Wendy\", \"Xavier\",\r",
									"    \"Yuri\", \"Agatha\", \"Bruno\", \"Carla\", \"Diego\", \"Elaine\", \"Fábio\", \"Gisele\", \"Heitor\",\r",
									"    \"Ingrid\", \"Júlio\", \"Karina\", \"Léo\", \"Mirella\", \"Nilo\", \"Oscar\", \"Priscila\",\r",
									"    \"Quirino\", \"Rosa\", \"Sérgio\", \"Tânia\", \"Ulisses\", \"Vera\", \"Walter\", \"Xênia\",\r",
									"    \"Yago\", \"Zilda\", \"Álvaro\", \"Érica\", \"Ígor\", \"Óliver\", \"Úrsula\", \"Caio\",\r",
									"    \"Daniela\", \"Estevan\", \"Fernanda\", \"Gustavo\", \"Hilda\", \"Ítalo\", \"Janaína\",\r",
									"    \"Kleber\", \"Lívia\", \"Marcio\", \"Nádia\", \"Orlando\", \"Paloma\", \"Roberto\",\r",
									"    \"Sílvia\", \"Tadeu\", \"Ubaldo\", \"Viviane\", \"Wilson\"\r",
									"  ];\r",
									"  \r",
									"  const surnames = [\r",
									"    \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Fernandes\", \"Almeida\", \"Costa\",\r",
									"    \"Teixeira\", \"Martins\", \"Lima\", \"Mendonça\", \"Nunes\", \"Carvalho\", \"Melo\", \"Cardoso\",\r",
									"    \"Pires\", \"Jesus\", \"Araújo\", \"Ribeiro\", \"Nascimento\", \"Lopes\", \"Marques\", \"Rocha\",\r",
									"    \"Alves\", \"Monteiro\", \"Neves\", \"Barros\", \"Moura\", \"Dias\", \"Ferreira\", \"Silveira\",\r",
									"    \"Gomes\", \"Magalhães\", \"Cruz\", \"Castro\", \"Siqueira\", \"Moraes\", \"Barbosa\", \"Pereira\",\r",
									"    \"Andrade\", \"Leite\", \"Henrique\", \"Guimarães\", \"Freitas\", \"Viana\", \"Brito\", \"Sales\",\r",
									"    \"Peixoto\", \"Farias\", \"Albuquerque\", \"Barbieri\", \"Cavalcanti\", \"Dumont\", \"Espíndola\",\r",
									"    \"Figueiredo\", \"Goulart\", \"Holanda\", \"Izabel\", \"Jardim\", \"Krause\", \"Lacerda\", \"Macedo\",\r",
									"    \"Nogueira\", \"Oliveira\", \"Pacheco\", \"Queiroz\", \"Rezende\", \"Salazar\", \"Torres\", \"Uchoa\",\r",
									"    \"Vasconcelos\", \"Werneck\", \"Ximenes\", \"Yamada\", \"Zanetti\", \"Andrade\", \"Braga\", \"Camargo\",\r",
									"    \"Drumond\", \"Esteves\", \"Fontes\", \"Guimarães\", \"Haddad\", \"Ibrahim\", \"Jacinto\", \"Kubitschek\",\r",
									"    \"Lemos\", \"Moraes\", \"Navarro\", \"Otero\", \"Pimentel\", \"Quintana\", \"Rangel\", \"Sampaio\",\r",
									"    \"Tavares\", \"Urbano\", \"Vieira\", \"Watanabe\"\r",
									"  ];\r",
									"\r",
									"  const randomFirstName = names[Math.floor(Math.random() * names.length)];\r",
									"  const randomLastName = surnames[Math.floor(Math.random() * surnames.length)];\r",
									"\r",
									"  const fullName = `${randomFirstName} ${randomLastName}`;\r",
									"  const email = `${removerAcentos(randomFirstName.toLowerCase())}.${removerAcentos(randomLastName.toLowerCase())}@example.com`;\r",
									"\r",
									"  pm.environment.set('fullName', fullName);\r",
									"  pm.environment.set('mailRegister', email);\r",
									"}\r",
									"generateFullName();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"mail\": \"{{mailRegister}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"confirmPassword\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user/",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Novo ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"Token\",pm.variables.replaceIn(JSON.parse(responseBody).token));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{mailRegister}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Incluir Diretoria",
			"item": [
				{
					"name": "Novo cadastro Diretoria (Happy Path)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifica se 'boardCode' está presente no corpo da resposta\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.include('\"boardCode\"');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateBoardName() {\r",
									"  const boardNamesPart1 = [\r",
									"    \"Administração\",\r",
									"    \"Tecnologia\",\r",
									"    \"Recursos Humanos\",\r",
									"    \"Marketing\",\r",
									"    \"Operações\",\r",
									"    \"Desenvolvimento\",\r",
									"    \"Logística\",\r",
									"    \"Jurídico\",\r",
									"    \"Qualidade\",\r",
									"    \"Compras\",\r",
									"    \"Relações Públicas\",\r",
									"    \"Inovação\",\r",
									"    \"Estratégia\",\r",
									"    \"Compliance\",\r",
									"    \"Projetos\",\r",
									"    \"Clientes\",\r",
									"    \"Suporte\",\r",
									"    \"Engenharia\",\r",
									"    \"Comunicação\",\r",
									"    \"Produção\",\r",
									"    \"Financeiro\",\r",
									"    \"Vendas\",\r",
									"    \"Gerenciamento de Projetos\",\r",
									"    \"Treinamento e Desenvolvimento\",\r",
									"    \"Assuntos Ambientais\",\r",
									"  ];\r",
									"\r",
									"  const boardNamesPart2 = [\r",
									"    \"& Finanças\",\r",
									"    \"Corporativa\",\r",
									"    \"& Tecnologia\",\r",
									"    \"& Operacional\",\r",
									"    \"& Recursos Humanos\",\r",
									"    \"& Marketing\",\r",
									"    \"& Inovação\",\r",
									"    \"& Desenvolvimento\",\r",
									"    \"& Logística\",\r",
									"    \"& Estratégia\",\r",
									"    \"& Legal\",\r",
									"    \"& Qualidade\",\r",
									"    \"& Comunicação\",\r",
									"    \"& Projetos\",\r",
									"    \"& Clientes\",\r",
									"    \"& Suporte\",\r",
									"    \"& Engenharia\",\r",
									"    \"& Produção\",\r",
									"    \"& Compras\",\r",
									"    \"& Relações Públicas\",\r",
									"    \"& Negócios\",\r",
									"    \"& Sustentabilidade\",\r",
									"    \"& Qualidade Total\",\r",
									"    \"& Aquisições e Fusões\",\r",
									"  ];\r",
									"\r",
									"  const boardNamesPart3 = [\r",
									"    \" Global\",\r",
									"    \" Corporativa\",\r",
									"    \" Estratégico\",\r",
									"    \" Interno\",\r",
									"    \" Externo\",\r",
									"    \" Sênior\",\r",
									"    \" Junior\",\r",
									"    \" de Mercado\",\r",
									"    \" de Produto\",\r",
									"    \" Digital\",\r",
									"    \" Internacional\",\r",
									"    \" Nacional\",\r",
									"    \" Regional\",\r",
									"    \" de Vendas\",\r",
									"    \" de TI\",\r",
									"    \" de Marketing\",\r",
									"    \" de Desenvolvimento\",\r",
									"    \" de Qualidade\",\r",
									"    \" de Projetos\",\r",
									"    \" de Engenharia\",\r",
									"    \" de Produção\",\r",
									"    \" de Compras\",\r",
									"    \" de Operações\",\r",
									"    \" de Negócios\",\r",
									"    \" de Logística\",\r",
									"  ];\r",
									"\r",
									"  const randomBoardName =\r",
									"    boardNamesPart1[Math.floor(Math.random() * boardNamesPart1.length)] +\r",
									"    \" \" +\r",
									"    boardNamesPart2[Math.floor(Math.random() * boardNamesPart2.length)] +\r",
									"    \" \" +\r",
									"    boardNamesPart3[Math.floor(Math.random() * boardNamesPart3.length)];\r",
									"\r",
									"  pm.environment.set('boardName', randomBoardName);\r",
									"}\r",
									"\r",
									"// Chamar a função para gerar e definir o nome do quadro no ambiente\r",
									"generateBoardName();\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"boardName\": \"{{boardName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Campo “boardName” vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de erro\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"O campo 'diretoria' é obrigatório.\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \" \"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Campo “boardName” com 51 caracteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de erro\", function () {\r",
									"    pm.expect(\"O campo 'diretoria' deve possuir no máximo 50 caracteres.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"AbCdeFgHiJklMnOpQrStUvWxYz&AbCdeFgHiJklMnOpQrStUvW&\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Campo “boardName” repetido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de alerta\", function () {\r",
									"    pm.expect(\"Não é possível salvar esse registro. Diretoria já cadastrada no sistema.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"{{boardName}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Campo “boardName” com números, letras e o caractere especial &",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de erro\", function () {\r",
									"    pm.expect(\"O campo 'diretoria' só pode conter letras e o caractere especial '&'.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"123456789Tentei&NaoConsegui\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Campo “boardName” somente com números",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de erro\", function () {\r",
									"    pm.expect(\"O campo 'diretoria' só pode conter letras e o caractere especial '&'.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"123456789\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Campo “boardName” com letras e outros caracteres especiais sem ser o &",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verificar mensagem de erro\", function () {\r",
									"    pm.expect(\"O campo 'diretoria' só pode conter letras e o caractere especial '&'.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"123456789Sabor@Suave\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"board",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{Token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delete Novo Admin",
			"item": [
				{
					"name": "Login ADMIN Qa.Coders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\",pm.variables.replaceIn(JSON.parse(responseBody).token));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"sysadmin@qacoders.com\",\r\n    \"password\": \"1234@Test\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Novo ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem de sucesso ao deletar usuário\", function () {\r",
									"    pm.expect(pm.response.json().msg).to.eql(\"Usuário deletado com sucesso!.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{Token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}