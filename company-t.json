{
	"info": {
		"_postman_id": "b06d5ced-e50b-4bff-bc35-23cb3841a36e",
		"name": "02 - Company",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30861529"
	},
	"item": [
		{
			"name": "Config - Admin",
			"item": [
				{
					"name": "Login - admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Como o Token expira a cada 24 horas, fazendo isso ela é gerado automaticamente a cada requisição mesmo após o prazo. \"Token\" é o nome dado a variavel. E depois é onde o valor do token será salvo.\r",
									"pm.globals.set(\"Token\", JSON.parse(responseBody).token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{MailAdmin}}\",\r\n    \"password\": \"{{PasswordAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Config - Novo Admin",
			"item": [
				{
					"name": "Criar Novo Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId\",pm.variables.replaceIn(JSON.parse(responseBody).user._id));\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"function gerarCPF() {\r",
									"    let num = Math.floor(Math.random() * 999999999);\r",
									"    let cpf = num.toString().padStart(9, '0');\r",
									"    cpf += calcularDigito(cpf);\r",
									"    cpf += calcularDigito(cpf);\r",
									"\r",
									"    return cpf;\r",
									"}\r",
									"\r",
									"function calcularDigito(cpf) {\r",
									"    let soma = 0;\r",
									"    for (let i = 0; i < cpf.length; i++) {\r",
									"        soma += parseInt(cpf[i]) * ((cpf.length + 1) - i);\r",
									"    }\r",
									"    let resto = (soma * 10) % 11;\r",
									"    return (resto > 9) ? '0' : resto.toString();\r",
									"}\r",
									"\r",
									"// Definir a variável no Postman\r",
									"pm.environment.set(\"cpf\", gerarCPF());\r",
									"\r",
									"function generateRandomPassword() {\r",
									"  const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"  const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';\r",
									"  const specialChars = '!@#$%^&*()_+-=[]{}|;:,.<>?';\r",
									"  const numbers = '0123456789';\r",
									"  const allChars = uppercaseChars + lowercaseChars + specialChars + numbers;\r",
									"\r",
									"  const getRandomChar = (charSet) => charSet[Math.floor(Math.random() * charSet.length)];\r",
									"\r",
									"  const passwordLength = Math.floor(Math.random() * 5) + 8; // Entre 8 e 12 dígitos\r",
									"\r",
									"  const password = [\r",
									"    getRandomChar(uppercaseChars),\r",
									"    getRandomChar(lowercaseChars),\r",
									"    getRandomChar(specialChars),\r",
									"    getRandomChar(numbers),\r",
									"    ...Array.from({ length: passwordLength - 4 }, () => getRandomChar(allChars))\r",
									"  ].sort(() => Math.random() - 0.5).join('');\r",
									"\r",
									"  pm.environment.set('password', password);\r",
									"}\r",
									"\r",
									"generateRandomPassword();\r",
									"\r",
									"\r",
									"function removerAcentos(str) {\r",
									"  return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r",
									"}\r",
									"\r",
									"function generateFullName() {\r",
									"  const names = [\r",
									"    \"Amelia\", \"Bernardo\", \"Cecilia\", \"Dante\", \"Elisa\", \"Fernando\", \"Giovanna\", \"Hugo\",\r",
									"    \"Íris\", \"João\", \"Larissa\", \"Matheus\", \"Nícolas\", \"Otávio\", \"Patrícia\", \"Quentin\",\r",
									"    \"Renata\", \"Sofia\", \"Thiago\", \"Valentina\", \"Yasmin\", \"Zacarias\", \"Luna\", \"Enzo\",\r",
									"    \"Vitória\", \"Ricardo\", \"Mariana\", \"Lucas\", \"Beatriz\", \"Eduardo\", \"Camila\", \"Gabriel\",\r",
									"    \"Helena\", \"Ian\", \"Jade\", \"Kaique\", \"Lorena\", \"Miguel\", \"Natalia\", \"Oliver\",\r",
									"    \"Pietra\", \"Quezia\", \"Raul\", \"Stella\", \"Tales\", \"Ursula\", \"Vinicius\", \"Wendy\", \"Xavier\",\r",
									"    \"Yuri\", \"Agatha\", \"Bruno\", \"Carla\", \"Diego\", \"Elaine\", \"Fábio\", \"Gisele\", \"Heitor\",\r",
									"    \"Ingrid\", \"Júlio\", \"Karina\", \"Léo\", \"Mirella\", \"Nilo\", \"Oscar\", \"Priscila\",\r",
									"    \"Quirino\", \"Rosa\", \"Sérgio\", \"Tânia\", \"Ulisses\", \"Vera\", \"Walter\", \"Xênia\",\r",
									"    \"Yago\", \"Zilda\", \"Álvaro\", \"Érica\", \"Ígor\", \"Óliver\", \"Úrsula\", \"Caio\",\r",
									"    \"Daniela\", \"Estevan\", \"Fernanda\", \"Gustavo\", \"Hilda\", \"Ítalo\", \"Janaína\",\r",
									"    \"Kleber\", \"Lívia\", \"Marcio\", \"Nádia\", \"Orlando\", \"Paloma\", \"Roberto\",\r",
									"    \"Sílvia\", \"Tadeu\", \"Ubaldo\", \"Viviane\", \"Wilson\"\r",
									"  ];\r",
									"  \r",
									"  const surnames = [\r",
									"    \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\", \"Fernandes\", \"Almeida\", \"Costa\",\r",
									"    \"Teixeira\", \"Martins\", \"Lima\", \"Mendonça\", \"Nunes\", \"Carvalho\", \"Melo\", \"Cardoso\",\r",
									"    \"Pires\", \"Jesus\", \"Araújo\", \"Ribeiro\", \"Nascimento\", \"Lopes\", \"Marques\", \"Rocha\",\r",
									"    \"Alves\", \"Monteiro\", \"Neves\", \"Barros\", \"Moura\", \"Dias\", \"Ferreira\", \"Silveira\",\r",
									"    \"Gomes\", \"Magalhães\", \"Cruz\", \"Castro\", \"Siqueira\", \"Moraes\", \"Barbosa\", \"Pereira\",\r",
									"    \"Andrade\", \"Leite\", \"Henrique\", \"Guimarães\", \"Freitas\", \"Viana\", \"Brito\", \"Sales\",\r",
									"    \"Peixoto\", \"Farias\", \"Albuquerque\", \"Barbieri\", \"Cavalcanti\", \"Dumont\", \"Espíndola\",\r",
									"    \"Figueiredo\", \"Goulart\", \"Holanda\", \"Izabel\", \"Jardim\", \"Krause\", \"Lacerda\", \"Macedo\",\r",
									"    \"Nogueira\", \"Oliveira\", \"Pacheco\", \"Queiroz\", \"Rezende\", \"Salazar\", \"Torres\", \"Uchoa\",\r",
									"    \"Vasconcelos\", \"Werneck\", \"Ximenes\", \"Yamada\", \"Zanetti\", \"Andrade\", \"Braga\", \"Camargo\",\r",
									"    \"Drumond\", \"Esteves\", \"Fontes\", \"Guimarães\", \"Haddad\", \"Ibrahim\", \"Jacinto\", \"Kubitschek\",\r",
									"    \"Lemos\", \"Moraes\", \"Navarro\", \"Otero\", \"Pimentel\", \"Quintana\", \"Rangel\", \"Sampaio\",\r",
									"    \"Tavares\", \"Urbano\", \"Vieira\", \"Watanabe\"\r",
									"  ];\r",
									"\r",
									"  const randomFirstName = names[Math.floor(Math.random() * names.length)];\r",
									"  const randomLastName = surnames[Math.floor(Math.random() * surnames.length)];\r",
									"\r",
									"  const fullName = `${randomFirstName} ${randomLastName}`;\r",
									"  const email = `${removerAcentos(randomFirstName.toLowerCase())}.${removerAcentos(randomLastName.toLowerCase())}@example.com`;\r",
									"\r",
									"  pm.environment.set('fullName', fullName);\r",
									"  pm.environment.set('mailRegister', email);\r",
									"}\r",
									"generateFullName();\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{fullName}}\",\r\n  \"mail\": \"{{mailRegister}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{cpf}}\",\r\n  \"confirmPassword\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user/",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Novo ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"Token\",pm.variables.replaceIn(JSON.parse(responseBody).token));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{mailRegister}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register",
			"item": [
				{
					"name": "Register Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									" \r",
									"pm.environment.set(\"IdCompany\",pm.variables.replaceIn(JSON.parse(responseBody).newCompany._id));\r",
									" \r",
									" \r",
									"pm.test(\"Check corporateName is full\", function () {\r",
									"    pm.expect(pm.environment.get(\"corporateName\")).to.eql(JSON.parse(responseBody).newCompany.corporateName);\r",
									"});\r",
									" \r",
									" \r",
									"pm.test(\"Check registerCompany is full\", function () {\r",
									"    pm.expect(pm.variables.get(\"registerCompany\")).to.eql(JSON.parse(responseBody).newCompany.cnpj);\r",
									"});\r",
									" \r",
									"pm.test(\"Check mail is full\", function () {\r",
									"    pm.expect(pm.variables.get(\"email\")).to.eql(JSON.parse(responseBody).newCompany.mail);\r",
									"});\r",
									" \r",
									"pm.test(\"Check matriz is full\", function () {\r",
									"    pm.expect(pm.variables.get(\"matriz\")).to.eql(JSON.parse(responseBody).newCompany.matriz);\r",
									"});\r",
									" \r",
									"pm.test(\"Check responsibleContact is full\", function () {\r",
									"    pm.expect(pm.variables.get(\"responsibleContact\")).to.eql(JSON.parse(responseBody).newCompany.responsibleContact);\r",
									"});\r",
									" \r",
									"pm.test(\"Check telephone is full\", function () {\r",
									"    pm.expect(pm.variables.get(\"telephone\")).to.eql(JSON.parse(responseBody).newCompany.telephone);\r",
									"});\r",
									" \r",
									"pm.test(\"Check serviceDescription is full\", function () {\r",
									"    pm.expect(pm.variables.get(\"serviceDescription\")).to.eql(JSON.parse(responseBody).newCompany.serviceDescription);\r",
									"});\r",
									" \r",
									"pm.test(\"Response has specific success message for corporateName\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var expectedMessage = \"Olá a companhia \" + pm.environment.get(\"corporateName\") + \" foi cadastrada com sucesso.\";\r",
									"    pm.expect(jsonData.msg).to.eql(expectedMessage);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									"\r",
									"\r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									"\r",
									"\r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									"\r",
									"\r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"Ecommerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e BemEstar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									"\r",
									"\r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									"\r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									"\r",
									"\r",
									"//---------------------------\r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									"\r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"company",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update",
			"item": [
				{
					"name": "Street",
					"item": [
						{
							"name": "Update Street - Required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'logradouro' é obrigatório.\");\r",
											"});\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Street - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Street - Alphanumeric - Numbers only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{streetwithnumbers}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Street - Alphanumeric - Only lethers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Street - Alphanumeric - Lethers and Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Para colocar letras e números no nome da rua\r",
											"\r",
											"// Função para gerar um nome com letras, números e caracteres especiais permitidos\r",
											"function generateStreetWithLettersAndNumbers(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ABpiyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 15;\r",
											"\r",
											"// Gerando um nome com letras, números e caracteres especiais permitidos\r",
											"let streetwithlethersandnumbers = generateStreetWithLettersAndNumbers(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithlethersandnumbers\", streetwithlethersandnumbers);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{streetwithlethersandnumbers}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Street - Alphanumeric - Special characters ('ª') ('º') ('-')",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Função para gerar um nome com lcaracteres especiais permitidos\r",
											"function generateWithAllowedCharacter(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ªº-';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando caracteres especiais permitidos\r",
											"let streetwithallowedcharacters = generateWithAllowedCharacter(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithallowedcharacters\", streetwithallowedcharacters);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{streetwithallowedcharacters}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Street - Alphanumeric - Other special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'logradouro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Função para gerar um nome de rua com caracteres especiais diferentes dos especificados\r",
											"function generateStreetWithSpecialCharacters(length) {\r",
											"    let result = '';\r",
											"    // Caracteres especiais permitidos\r",
											"    const allowedSpecialCharacters = '!@#$%&*()_+=?|<>[]{}~^';\r",
											"    // Todos os caracteres permitidos (letras, números e caracteres especiais)\r",
											"    const characters = 'vwxyz09' + allowedSpecialCharacters;\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando um nome de rua com caracteres especiais diferentes dos especificados\r",
											"let streetwithspecialcharacters = generateStreetWithSpecialCharacters(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithspecialcharacters\", streetwithspecialcharacters);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{streetwithspecialcharacters}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Street – 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street50Chars}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Street – 49 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street49Chars}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Number",
					"item": [
						{
							"name": "Update Number - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Number - Required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'número' é obrigatório.\");\r",
											"});\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Number - Maximum 10 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um número de rua com 10 dígitos\r",
											"function generateStreetNumber10Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um número de rua com 9 dígitos\r",
											"function generateStreetNumber9Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um número de rua com 11 dígitos\r",
											"function generateStreetNumber11Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os números de rua\r",
											"pm.environment.set(\"streetNumber10Digits\", generateStreetNumber10Digits());\r",
											"pm.environment.set(\"streetNumber9Digits\", generateStreetNumber9Digits());\r",
											"pm.environment.set(\"streetNumber11Digits\", generateStreetNumber11Digits());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{streetNumber10Digits}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Number - Maximum 9 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um número de rua com 10 dígitos\r",
											"function generateStreetNumber10Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um número de rua com 9 dígitos\r",
											"function generateStreetNumber9Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um número de rua com 11 dígitos\r",
											"function generateStreetNumber11Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os números de rua\r",
											"pm.environment.set(\"streetNumber10Digits\", generateStreetNumber10Digits());\r",
											"pm.environment.set(\"streetNumber9Digits\", generateStreetNumber9Digits());\r",
											"pm.environment.set(\"streetNumber11Digits\", generateStreetNumber11Digits());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{streetNumber9Digits}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Number – Maximum 11 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'número' deve possuir no máximo 10 caracteres.\");\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um número de rua com 10 dígitos\r",
											"function generateStreetNumber10Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um número de rua com 9 dígitos\r",
											"function generateStreetNumber9Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um número de rua com 11 dígitos\r",
											"function generateStreetNumber11Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 11; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os números de rua\r",
											"pm.environment.set(\"streetNumber10Digits\", generateStreetNumber10Digits());\r",
											"pm.environment.set(\"streetNumber9Digits\", generateStreetNumber9Digits());\r",
											"pm.environment.set(\"streetNumber11Digits\", generateStreetNumber11Digits());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{streetNumber11Digits}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Complement",
					"item": [
						{
							"name": "Update Complement - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											" \r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Complement - Alphanumeric - Special characters ('ª') ('º') ('-')",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Função para gerar um nome com caracteres especiais permitidos\r",
											"function generateWithAllowedCharacter(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ªº-';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando caracteres especiais permitidos\r",
											"let streetwithallowedcharacters = generateWithAllowedCharacter(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithallowedcharacters\", streetwithallowedcharacters);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{streetwithallowedcharacters}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Complement - Alphanumeric - Other special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'complemento' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Função para gerar um nome de rua com caracteres especiais diferentes dos especificados\r",
											"function generateStreetWithSpecialCharacters(length) {\r",
											"    let result = '';\r",
											"    // Caracteres especiais permitidos\r",
											"    const allowedSpecialCharacters = '!@#$%&*()_+=?|<>[]{}~^';\r",
											"    // Todos os caracteres permitidos (letras, números e caracteres especiais)\r",
											"    const characters = 'ABC789' + allowedSpecialCharacters;\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando um nome de rua com caracteres especiais diferentes dos especificados\r",
											"let streetwithspecialcharacters = generateStreetWithSpecialCharacters(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithspecialcharacters\", streetwithspecialcharacters);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{streetwithspecialcharacters}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Complement – 80 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											"// Função para gerar um complemento de rua com 80 caracteres\r",
											"function generateStreetComplement80Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 80; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um complemento de rua com 79 caracteres\r",
											"function generateStreetComplement79Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 79; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um complemento de rua com 81 caracteres\r",
											"function generateStreetComplement81Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 81; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os complementos de rua\r",
											"pm.environment.set(\"streetComplement80Chars\", generateStreetComplement80Chars());\r",
											"pm.environment.set(\"streetComplement79Chars\", generateStreetComplement79Chars());\r",
											"pm.environment.set(\"streetComplement81Chars\", generateStreetComplement81Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{streetComplement80Chars}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Complement – 79 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											"// Função para gerar um complemento de rua com 80 caracteres\r",
											"function generateStreetComplement80Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 80; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um complemento de rua com 79 caracteres\r",
											"function generateStreetComplement79Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 79; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um complemento de rua com 81 caracteres\r",
											"function generateStreetComplement81Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 81; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os complementos de rua\r",
											"pm.environment.set(\"streetComplement80Chars\", generateStreetComplement80Chars());\r",
											"pm.environment.set(\"streetComplement79Chars\", generateStreetComplement79Chars());\r",
											"pm.environment.set(\"streetComplement81Chars\", generateStreetComplement81Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{streetComplement79Chars}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Complement – 81 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'complemento' deve possuir no máximo 80 caracteres.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											"\r",
											"// Função para gerar um complemento de rua com 80 caracteres\r",
											"function generateStreetComplement80Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 80; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um complemento de rua com 79 caracteres\r",
											"function generateStreetComplement79Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 79; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um complemento de rua com 81 caracteres\r",
											"function generateStreetComplement81Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 81; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os complementos de rua\r",
											"pm.environment.set(\"streetComplement80Chars\", generateStreetComplement80Chars());\r",
											"pm.environment.set(\"streetComplement79Chars\", generateStreetComplement79Chars());\r",
											"pm.environment.set(\"streetComplement81Chars\", generateStreetComplement81Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{streetComplement81Chars}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Neighborhood",
					"item": [
						{
							"name": "Update Neighborhood - Required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'bairro' é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/657d9928a2d3ae70485d990d",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"657d9928a2d3ae70485d990d"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Neighborhood - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/657d9928a2d3ae70485d990d",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"657d9928a2d3ae70485d990d"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Neighborhood - Alphanumeric - Only numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"//------------------------------\r",
											"\r",
											"// Função para gerar um district com apenas números\r",
											"function generateDistrictNumbersOnly() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com letras e números\r",
											"function generateDistrictLettersAndNumbers() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const maxLength = 10; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com os caracteres 'ª', 'º' e '-'\r",
											"function generateDistrictSpecialCharacters() {\r",
											"    const specialCharacters = 'ªº-';\r",
											"    const maxLength = 10; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += specialCharacters.charAt(Math.floor(Math.random() * specialCharacters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com outros tipos de caracteres que não sejam 'ª', 'º', '-'\r",
											"function generateDistrictOtherCharacters() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+=?|<>[]{}~^;:,./';\r",
											"    const maxLength = 10; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os districts gerados\r",
											"pm.environment.set(\"districtNumbersOnly\", generateDistrictNumbersOnly());\r",
											"pm.environment.set(\"districtLettersAndNumbers\", generateDistrictLettersAndNumbers());\r",
											"pm.environment.set(\"districtSpecialCharacters\", generateDistrictSpecialCharacters());\r",
											"pm.environment.set(\"districtOtherCharacters\", generateDistrictOtherCharacters());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{districtNumbersOnly}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Neighborhood - Alphanumeric - Lethers and Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Para colocar letras e números no nome da rua\r",
											"\r",
											"// Função para gerar um nome com letras, números e caracteres especiais permitidos\r",
											"function generateStreetWithLettersAndNumbers(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando um nome com letras, números e caracteres especiais permitidos\r",
											"let streetwithlethersandnumbers = generateStreetWithLettersAndNumbers(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithlethersandnumbers\", streetwithlethersandnumbers);\r",
											"\r",
											"//--------------------\r",
											"// Função para gerar um district com apenas números\r",
											"function generateDistrictNumbersOnly() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com letras e números\r",
											"function generateDistrictLettersAndNumbers() {\r",
											"    const characters = 'ABcdexyz0123456789';\r",
											"    const maxLength = 15; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com os caracteres 'ª', 'º' e '-'\r",
											"function generateDistrictSpecialCharacters() {\r",
											"    const specialCharacters = 'ªº-';\r",
											"    const maxLength = 10; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += specialCharacters.charAt(Math.floor(Math.random() * specialCharacters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com outros tipos de caracteres que não sejam 'ª', 'º', '-'\r",
											"function generateDistrictOtherCharacters() {\r",
											"    const characters = '!@#$%^&*()_+=?|<>[]{}~^;:,./';\r",
											"    const maxLength = 10; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os districts gerados\r",
											"pm.environment.set(\"districtNumbersOnly\", generateDistrictNumbersOnly());\r",
											"pm.environment.set(\"districtLettersAndNumbers\", generateDistrictLettersAndNumbers());\r",
											"pm.environment.set(\"districtSpecialCharacters\", generateDistrictSpecialCharacters());\r",
											"pm.environment.set(\"districtOtherCharacters\", generateDistrictOtherCharacters());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{districtLettersAndNumbers}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Neighborhood - Alphanumeric - Special characters ('ª') ('º') ('-')",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Função para gerar um nome com lcaracteres especiais permitidos\r",
											"function generateWithAllowedCharacter(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ªº-';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando caracteres especiais permitidos\r",
											"let streetwithallowedcharacters = generateWithAllowedCharacter(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithallowedcharacters\", streetwithallowedcharacters);\r",
											"\r",
											"//--------------------------\r",
											"// Função para gerar um district com apenas números\r",
											"function generateDistrictNumbersOnly() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com letras e números\r",
											"function generateDistrictLettersAndNumbers() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const maxLength = 10; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com os caracteres 'ª', 'º' e '-'\r",
											"function generateDistrictSpecialCharacters() {\r",
											"    const specialCharacters = 'ABCDabcdªº-';\r",
											"    const maxLength = 15; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += specialCharacters.charAt(Math.floor(Math.random() * specialCharacters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com outros tipos de caracteres que não sejam 'ª', 'º', '-'\r",
											"function generateDistrictOtherCharacters() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+=?|<>[]{}~^;:,./';\r",
											"    const maxLength = 10; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os districts gerados\r",
											"pm.environment.set(\"districtNumbersOnly\", generateDistrictNumbersOnly());\r",
											"pm.environment.set(\"districtLettersAndNumbers\", generateDistrictLettersAndNumbers());\r",
											"pm.environment.set(\"districtSpecialCharacters\", generateDistrictSpecialCharacters());\r",
											"pm.environment.set(\"districtOtherCharacters\", generateDistrictOtherCharacters());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{districtSpecialCharacters}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Neighborhood - Alphanumeric - Other special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'bairro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Função para gerar um nome de rua com caracteres especiais diferentes dos especificados\r",
											"function generateStreetWithSpecialCharacters(length) {\r",
											"    let result = '';\r",
											"    // Caracteres especiais permitidos\r",
											"    const allowedSpecialCharacters = '!@#$%&*()_+=?|<>[]{}~^';\r",
											"    // Todos os caracteres permitidos (letras, números e caracteres especiais)\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789' + allowedSpecialCharacters;\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando um nome de rua com caracteres especiais diferentes dos especificados\r",
											"let streetwithspecialcharacters = generateStreetWithSpecialCharacters(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithspecialcharacters\", streetwithspecialcharacters);\r",
											"\r",
											"//-----------\r",
											"// Função para gerar um district com apenas números\r",
											"function generateDistrictNumbersOnly() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com letras e números\r",
											"function generateDistrictLettersAndNumbers() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const maxLength = 10; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com os caracteres 'ª', 'º' e '-'\r",
											"function generateDistrictSpecialCharacters() {\r",
											"    const specialCharacters = 'ªº-';\r",
											"    const maxLength = 10; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += specialCharacters.charAt(Math.floor(Math.random() * specialCharacters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um district com outros tipos de caracteres que não sejam 'ª', 'º', '-'\r",
											"function generateDistrictOtherCharacters() {\r",
											"    const characters = 'ABCD!@#$%^&*()_+=?|<>[]{}~^;:,./';\r",
											"    const maxLength = 19; // Defina o comprimento máximo que você deseja permitir\r",
											"    let result = '';\r",
											"    const length = Math.floor(Math.random() * (maxLength + 1));\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os districts gerados\r",
											"pm.environment.set(\"districtNumbersOnly\", generateDistrictNumbersOnly());\r",
											"pm.environment.set(\"districtLettersAndNumbers\", generateDistrictLettersAndNumbers());\r",
											"pm.environment.set(\"districtSpecialCharacters\", generateDistrictSpecialCharacters());\r",
											"pm.environment.set(\"districtOtherCharacters\", generateDistrictOtherCharacters());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{districtOtherCharacters}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Neighborhood – Maximum 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua/usei o mesmo para distrito\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{street50Chars}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Neighborhood – Maximum 49 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua/ usei o mesmo para distrito\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{street49Chars}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Neighborhood – Maximum 51 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'bairro' deve possuir no máximo 50 caracteres.\");\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua/usei a mesma para distrito\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{street51Chars}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "City",
					"item": [
						{
							"name": "Update City - Required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/657d9928a2d3ae70485d990d",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"657d9928a2d3ae70485d990d"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update City - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/657d9928a2d3ae70485d990d",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"657d9928a2d3ae70485d990d"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update City - Only lethers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update City - Only numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{streetwithnumbers}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update City - Lethers and Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Para colocar letras e números no nome da rua\r",
											"\r",
											"// Função para gerar um nome com letras, números e caracteres especiais permitidos\r",
											"function generateStreetWithLettersAndNumbers(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ABCxyz0123456789ªº‘-';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando um nome com letras, números e caracteres especiais permitidos\r",
											"let streetwithlethersandnumbers = generateStreetWithLettersAndNumbers(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithlethersandnumbers\", streetwithlethersandnumbers);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{streetwithlethersandnumbers}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update City - Alphanumeric - Special characters ('ª') ('º') ('-')",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Função para gerar um nome com lcaracteres especiais permitidos\r",
											"function generateWithAllowedCharacter(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ªº-';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando caracteres especiais permitidos\r",
											"let streetwithallowedcharacters = generateWithAllowedCharacter(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithallowedcharacters\", streetwithallowedcharacters);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{streetwithallowedcharacters}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update City - Alphanumeric - Other special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números no nome da rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"\r",
											"// Função para gerar um nome de rua com caracteres especiais diferentes dos especificados\r",
											"function generateStreetWithSpecialCharacters(length) {\r",
											"    let result = '';\r",
											"    // Caracteres especiais permitidos\r",
											"    const allowedSpecialCharacters = '!@#$%&*()_+=?|<>[]{}~^';\r",
											"    // Todos os caracteres permitidos (letras, números e caracteres especiais)\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789' + allowedSpecialCharacters;\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo o comprimento do nome desejado\r",
											"const nameLength = 10;\r",
											"\r",
											"// Gerando um nome de rua com caracteres especiais diferentes dos especificados\r",
											"let streetwithspecialcharacters = generateStreetWithSpecialCharacters(nameLength);\r",
											"\r",
											"// Definindo a variável de ambiente para ser usada na solicitação\r",
											"pm.environment.set(\"streetwithspecialcharacters\", streetwithspecialcharacters);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{streetwithspecialcharacters}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update City – 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{street50Chars}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update City – 49 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{street49Chars}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update City – 51 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'cidade' deve possuir no máximo 50 caracteres.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{street51Chars}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "State",
					"item": [
						{
							"name": "Update State - Required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/657d9928a2d3ae70485d990d",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"657d9928a2d3ae70485d990d"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/657d9928a2d3ae70485d990d",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"657d9928a2d3ae70485d990d"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State - Uppercase letters only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"// Função para gerar um state com duas letras maiúsculas\r",
											"function generateStateTwoUppercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras minúsculas\r",
											"function generateStateTwoLowercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras maiúsculas e minúsculas juntas\r",
											"function generateStateTwoMixedCaseLetters() {\r",
											"    let result = '';\r",
											"    const uppercaseCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const lowercaseCharacters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const uppercaseCharacter = uppercaseCharacters.charAt(Math.floor(Math.random() * uppercaseCharacters.length));\r",
											"    const lowercaseCharacter = lowercaseCharacters.charAt(Math.floor(Math.random() * lowercaseCharacters.length));\r",
											"    result = uppercaseCharacter + lowercaseCharacter;\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois números\r",
											"function generateStateTwoNumbers() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois caracteres especiais\r",
											"function generateStateTwoSpecialCharacters() {\r",
											"    const specialCharacters = '!@#$%^&*()-_+=[]{}|;:,.<>?/~';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += specialCharacters.charAt(Math.floor(Math.random() * specialCharacters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os states gerados\r",
											"pm.environment.set(\"stateTwoUppercaseLetters\", generateStateTwoUppercaseLetters());\r",
											"pm.environment.set(\"stateTwoLowercaseLetters\", generateStateTwoLowercaseLetters());\r",
											"pm.environment.set(\"stateTwoMixedCaseLetters\", generateStateTwoMixedCaseLetters());\r",
											"pm.environment.set(\"stateTwoNumbers\", generateStateTwoNumbers());\r",
											"pm.environment.set(\"stateTwoSpecialCharacters\", generateStateTwoSpecialCharacters());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{stateTwoUppercaseLetters}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State - Lowercase letters only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"// Função para gerar um state com duas letras maiúsculas\r",
											"function generateStateTwoUppercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras minúsculas\r",
											"function generateStateTwoLowercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras maiúsculas e minúsculas juntas\r",
											"function generateStateTwoMixedCaseLetters() {\r",
											"    let result = '';\r",
											"    const uppercaseCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const lowercaseCharacters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const uppercaseCharacter = uppercaseCharacters.charAt(Math.floor(Math.random() * uppercaseCharacters.length));\r",
											"    const lowercaseCharacter = lowercaseCharacters.charAt(Math.floor(Math.random() * lowercaseCharacters.length));\r",
											"    result = uppercaseCharacter + lowercaseCharacter;\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois números\r",
											"function generateStateTwoNumbers() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois caracteres especiais\r",
											"function generateStateTwoSpecialCharacters() {\r",
											"    const specialCharacters = '!@#$%^&*()-_+=[]{}|;:,.<>?/~';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += specialCharacters.charAt(Math.floor(Math.random() * specialCharacters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os states gerados\r",
											"pm.environment.set(\"stateTwoUppercaseLetters\", generateStateTwoUppercaseLetters());\r",
											"pm.environment.set(\"stateTwoLowercaseLetters\", generateStateTwoLowercaseLetters());\r",
											"pm.environment.set(\"stateTwoMixedCaseLetters\", generateStateTwoMixedCaseLetters());\r",
											"pm.environment.set(\"stateTwoNumbers\", generateStateTwoNumbers());\r",
											"pm.environment.set(\"stateTwoSpecialCharacters\", generateStateTwoSpecialCharacters());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{stateTwoLowercaseLetters}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State - Mixed Case Letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"// Função para gerar um state com duas letras maiúsculas\r",
											"function generateStateTwoUppercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras minúsculas\r",
											"function generateStateTwoLowercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras maiúsculas e minúsculas juntas\r",
											"function generateStateTwoMixedCaseLetters() {\r",
											"    let result = '';\r",
											"    const uppercaseCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const lowercaseCharacters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const uppercaseCharacter = uppercaseCharacters.charAt(Math.floor(Math.random() * uppercaseCharacters.length));\r",
											"    const lowercaseCharacter = lowercaseCharacters.charAt(Math.floor(Math.random() * lowercaseCharacters.length));\r",
											"    result = uppercaseCharacter + lowercaseCharacter;\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois números\r",
											"function generateStateTwoNumbers() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois caracteres especiais\r",
											"function generateStateTwoSpecialCharacters() {\r",
											"    const specialCharacters = '!@#$%^&*()-_+=[]{}|;:,.<>?/~';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += specialCharacters.charAt(Math.floor(Math.random() * specialCharacters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os states gerados\r",
											"pm.environment.set(\"stateTwoUppercaseLetters\", generateStateTwoUppercaseLetters());\r",
											"pm.environment.set(\"stateTwoLowercaseLetters\", generateStateTwoLowercaseLetters());\r",
											"pm.environment.set(\"stateTwoMixedCaseLetters\", generateStateTwoMixedCaseLetters());\r",
											"pm.environment.set(\"stateTwoNumbers\", generateStateTwoNumbers());\r",
											"pm.environment.set(\"stateTwoSpecialCharacters\", generateStateTwoSpecialCharacters());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{stateTwoMixedCaseLetters}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State - Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"// Função para gerar um state com duas letras maiúsculas\r",
											"function generateStateTwoUppercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras minúsculas\r",
											"function generateStateTwoLowercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras maiúsculas e minúsculas juntas\r",
											"function generateStateTwoMixedCaseLetters() {\r",
											"    let result = '';\r",
											"    const uppercaseCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const lowercaseCharacters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const uppercaseCharacter = uppercaseCharacters.charAt(Math.floor(Math.random() * uppercaseCharacters.length));\r",
											"    const lowercaseCharacter = lowercaseCharacters.charAt(Math.floor(Math.random() * lowercaseCharacters.length));\r",
											"    result = uppercaseCharacter + lowercaseCharacter;\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois números\r",
											"function generateStateTwoNumbers() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois caracteres especiais\r",
											"function generateStateTwoSpecialCharacters() {\r",
											"    const specialCharacters = '!@#$%^&*()-_+=[]{}|;:,.<>?/~';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += specialCharacters.charAt(Math.floor(Math.random() * specialCharacters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os states gerados\r",
											"pm.environment.set(\"stateTwoUppercaseLetters\", generateStateTwoUppercaseLetters());\r",
											"pm.environment.set(\"stateTwoLowercaseLetters\", generateStateTwoLowercaseLetters());\r",
											"pm.environment.set(\"stateTwoMixedCaseLetters\", generateStateTwoMixedCaseLetters());\r",
											"pm.environment.set(\"stateTwoNumbers\", generateStateTwoNumbers());\r",
											"pm.environment.set(\"stateTwoSpecialCharacters\", generateStateTwoSpecialCharacters());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{stateTwoNumbers}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State - Special Character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 99999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Para colocar apenas números na rua\r",
											"\r",
											"function generateRandomNumberStreet() {\r",
											"    const maxNumberstreet = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumberstreet + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let streetwithnumbers = generateRandomNumberStreet();\r",
											"pm.environment.set(\"streetwithnumbers\", streetwithnumbers);\r",
											" \r",
											"// Função para gerar um state com duas letras maiúsculas\r",
											"function generateStateTwoUppercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras minúsculas\r",
											"function generateStateTwoLowercaseLetters() {\r",
											"    let result = '';\r",
											"    const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com duas letras maiúsculas e minúsculas juntas\r",
											"function generateStateTwoMixedCaseLetters() {\r",
											"    let result = '';\r",
											"    const uppercaseCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const lowercaseCharacters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const uppercaseCharacter = uppercaseCharacters.charAt(Math.floor(Math.random() * uppercaseCharacters.length));\r",
											"    const lowercaseCharacter = lowercaseCharacters.charAt(Math.floor(Math.random() * lowercaseCharacters.length));\r",
											"    result = uppercaseCharacter + lowercaseCharacter;\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois números\r",
											"function generateStateTwoNumbers() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com dois caracteres especiais\r",
											"function generateStateTwoSpecialCharacters() {\r",
											"    const specialCharacters = '!@#$%^&*()-_+=[]{}|;:,.<>?/~';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += specialCharacters.charAt(Math.floor(Math.random() * specialCharacters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os states gerados\r",
											"pm.environment.set(\"stateTwoUppercaseLetters\", generateStateTwoUppercaseLetters());\r",
											"pm.environment.set(\"stateTwoLowercaseLetters\", generateStateTwoLowercaseLetters());\r",
											"pm.environment.set(\"stateTwoMixedCaseLetters\", generateStateTwoMixedCaseLetters());\r",
											"pm.environment.set(\"stateTwoNumbers\", generateStateTwoNumbers());\r",
											"pm.environment.set(\"stateTwoSpecialCharacters\", generateStateTwoSpecialCharacters());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{stateTwoSpecialCharacters}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State – 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											"// Função para gerar um state com duas letras maiúsculas\r",
											"function generateStateTwoUppercaseLetters() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com uma letra maiúscula\r",
											"function generateStateOneUppercaseLetter() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    return characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"}\r",
											"\r",
											"// Função para gerar um state com três letras maiúsculas\r",
											"function generateStateThreeUppercaseLetters() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os states gerados\r",
											"pm.environment.set(\"stateTwoUppercaseLetters\", generateStateTwoUppercaseLetters());\r",
											"pm.environment.set(\"stateOneUppercaseLetter\", generateStateOneUppercaseLetter());\r",
											"pm.environment.set(\"stateThreeUppercaseLetters\", generateStateThreeUppercaseLetters());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{stateTwoUppercaseLetters}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State – 1 character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' deve possuir 2 caracteres.\");\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											"// Função para gerar um state com duas letras maiúsculas\r",
											"function generateStateTwoUppercaseLetters() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com uma letra maiúscula\r",
											"function generateStateOneUppercaseLetter() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    return characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"}\r",
											"\r",
											"// Função para gerar um state com três letras maiúsculas\r",
											"function generateStateThreeUppercaseLetters() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os states gerados\r",
											"pm.environment.set(\"stateTwoUppercaseLetters\", generateStateTwoUppercaseLetters());\r",
											"pm.environment.set(\"stateOneUppercaseLetter\", generateStateOneUppercaseLetter());\r",
											"pm.environment.set(\"stateThreeUppercaseLetters\", generateStateThreeUppercaseLetters());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{stateOneUppercaseLetters}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update State – 3 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'estado' deve possuir 2 caracteres.\");\r",
											"});\r",
											"\r",
											"\r",
											" \r",
											" \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"// Função para gerar um nome de rua com 50 caracteres\r",
											"function generateStreet50Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 49 caracteres\r",
											"function generateStreet49Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 49; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um nome de rua com 51 caracteres\r",
											"function generateStreet51Chars() {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < 51; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os nomes de rua\r",
											"pm.environment.set(\"street50Chars\", generateStreet50Chars());\r",
											"pm.environment.set(\"street49Chars\", generateStreet49Chars());\r",
											"pm.environment.set(\"street51Chars\", generateStreet51Chars());\r",
											"\r",
											"// Função para gerar um state com duas letras maiúsculas\r",
											"function generateStateTwoUppercaseLetters() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 2; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um state com uma letra maiúscula\r",
											"function generateStateOneUppercaseLetter() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    return characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"}\r",
											"\r",
											"// Função para gerar um state com três letras maiúsculas\r",
											"function generateStateThreeUppercaseLetters() {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 3; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Definindo as variáveis de ambiente com os states gerados\r",
											"pm.environment.set(\"stateTwoUppercaseLetters\", generateStateTwoUppercaseLetters());\r",
											"pm.environment.set(\"stateOneUppercaseLetter\", generateStateOneUppercaseLetter());\r",
											"pm.environment.set(\"stateThreeUppercaseLetters\", generateStateThreeUppercaseLetters());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{stateThreeUppercaseLetters}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Country",
					"item": [
						{
							"name": "Update Country -  Required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo País é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Country -  Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Country – 50 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street49Chars}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasilllllllllllllllllllllllllllllllllllllllllllll\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Country – Maximum 49 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street49Chars}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasillllllllllllllllllllllllllllllllllllllllllll\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Country – Maximum 51 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo País permite até 50 caracteres.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"20270040\",\r\n      \"city\": \"Rio de Janeiro\",\r\n      \"state\": \"RJ\",\r\n      \"district\": \"Tijuca\",\r\n      \"street\": \"rua\",\r\n      \"number\": \"3\",\r\n      \"complement\": \"Sala 01\",\r\n      \"country\": \"Brasillllllllllllllllllllllllllllllllllllllllllllll\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Zip Code",
					"item": [
						{
							"name": "Update Zipcode -  Required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CEP' é obrigatório.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Zipcode -  Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Zipcode -  8 Digits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"A mensagem 'Endereço da companhia atualizado com sucesso.' está presente\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.msg).to.eql(\"Endereço da companhia atualizado com sucesso.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"//-------------------\r",
											"// Função para gerar um zipcode com 8 números\r",
											"function generateZipCode8Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um zipcode com 7 números\r",
											"function generateZipCode7Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 7; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um zipcode com 9 números\r",
											"function generateZipCode9Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"// Definindo as variáveis de ambiente com os zipcodes gerados\r",
											"pm.environment.set(\"zipCode8Digits\", generateZipCode8Digits());\r",
											"pm.environment.set(\"zipCode7Digits\", generateZipCode7Digits());\r",
											"pm.environment.set(\"zipCode9Digits\", generateZipCode9Digits());\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode8Digits}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Zipcode -  7 Digits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CEP' deve conter 8 dígitos\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"//-------------------\r",
											"// Função para gerar um zipcode com 8 números\r",
											"function generateZipCode8Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um zipcode com 7 números\r",
											"function generateZipCode7Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 7; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um zipcode com 9 números\r",
											"function generateZipCode9Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Definindo as variáveis de ambiente com os zipcodes gerados\r",
											"pm.environment.set(\"zipCode8Digits\", generateZipCode8Digits());\r",
											"pm.environment.set(\"zipCode7Digits\", generateZipCode7Digits());\r",
											"pm.environment.set(\"zipCode9Digits\", generateZipCode9Digits());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode7Digits}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Zipcode -  9 Digits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem de erro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"O campo 'CEP' deve conter 8 dígitos\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Criar cep\r",
											"function generateZipCode() {\r",
											"    let zipCode = '';\r",
											" \r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											" \r",
											"    return zipCode;\r",
											"}\r",
											" \r",
											"let zipCode = generateZipCode();\r",
											"pm.environment.set(\"zipCode\", zipCode);\r",
											"\r",
											"\r",
											"//---------------------------\r",
											"//Criar Cidade e Estado, Bairro e Rua\r",
											"function generateLocationData() {\r",
											"    const locationData = {\r",
											"        \"SP\": {\r",
											"            \"São Paulo\": {\r",
											"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
											"                \"streets\": [\"Rua Augusta\", \"Av Paulista\", \"Rua da Consolação\", \"Av Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
											"            },\r",
											"            \"Campinas\": {\r",
											"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
											"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
											"            },\r",
											"        },\r",
											"        \"RJ\": {\r",
											"            \"Rio de Janeiro\": {\r",
											"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
											"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
											"            },\r",
											"            \"Niterói\": {\r",
											"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
											"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
											"            },\r",
											"        },\r",
											"     \"MG\": {\r",
											"            \"Belo Horizonte\": {\r",
											"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
											"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
											"            },\r",
											"            \"Uberlândia\": {\r",
											"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
											"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
											"            },\r",
											"        },\r",
											"        \"BA\": {\r",
											"            \"Salvador\": {\r",
											"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
											"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
											"            },\r",
											"            \"Feira de Santana\": {\r",
											"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
											"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
											"            },\r",
											"        },\r",
											"        \"PR\": {\r",
											"            \"Curitiba\": {\r",
											"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
											"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
											"            },\r",
											"            \"Londrina\": {\r",
											"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim ShangriLa\"],\r",
											"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
											"            },\r",
											"        }\r",
											"    };\r",
											" \r",
											"    // Escolhe um estado aleatoriamente\r",
											"    const states = Object.keys(locationData);\r",
											"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
											" \r",
											"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
											"    const cities = Object.keys(locationData[randomState]);\r",
											"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
											" \r",
											"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
											"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
											"    ];\r",
											"    const randomStreet = locationData[randomState][randomCity].streets[\r",
											"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
											"    ];\r",
											" \r",
											"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
											"}\r",
											" \r",
											"let { state, city, district, street } = generateLocationData();\r",
											"pm.environment.set(\"state\", state);\r",
											"pm.environment.set(\"city\", city);\r",
											"pm.environment.set(\"district\", district);\r",
											"pm.environment.set(\"street\", street);\r",
											"\r",
											"//Gerar número aleatório\r",
											"function generateRandomNumber() {\r",
											"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
											"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
											"}\r",
											" \r",
											"let number = generateRandomNumber();\r",
											"pm.environment.set(\"number\", number);\r",
											" \r",
											"//Criar um complemento aleatório\r",
											"function generateAddressComplement() {\r",
											"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
											"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
											" \r",
											"    let complementNumber;\r",
											"    if (complement === \"Bloco\") {\r",
											"        // Para \"Bloco\", usar letras\r",
											"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
											"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    } else {\r",
											"        // Para os outros tipos, usar números\r",
											"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
											"    }\r",
											" \r",
											"    return `${complement} ${complementNumber}`;\r",
											"}\r",
											" \r",
											"let complement = generateAddressComplement();\r",
											"pm.environment.set(\"complement\", complement);\r",
											"\r",
											"\r",
											"//-------------------\r",
											"// Função para gerar um zipcode com 8 números\r",
											"function generateZipCode8Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um zipcode com 7 números\r",
											"function generateZipCode7Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 7; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Função para gerar um zipcode com 9 números\r",
											"function generateZipCode9Digits() {\r",
											"    let result = '';\r",
											"    for (let i = 0; i < 9; i++) {\r",
											"        result += Math.floor(Math.random() * 10); // Gera um dígito aleatório de 0 a 9\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"\r",
											"// Definindo as variáveis de ambiente com os zipcodes gerados\r",
											"pm.environment.set(\"zipCode8Digits\", generateZipCode8Digits());\r",
											"pm.environment.set(\"zipCode7Digits\", generateZipCode7Digits());\r",
											"pm.environment.set(\"zipCode9Digits\", generateZipCode9Digits());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{Token}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode9Digits}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/company/address/{{IdCompany}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"company",
										"address",
										"{{IdCompany}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Delete Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Companhia deletado com sucesso.\", function () {\r",
									"       pm.expect(pm.response.text()).to.include(\"Companhia deletado com sucesso.\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/company/{{IdCompany}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"company",
								"{{IdCompany}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}