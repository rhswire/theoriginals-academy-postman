{
	"info": {
		"_postman_id": "e22c625a-6e2b-478f-9b8c-0c4e77005ad8",
		"name": "cadastroempresa-D",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27630415",
		"_collection_link": "https://planetary-zodiac-829770.postman.co/workspace/The-Originals~b0b7a5e1-fed1-42fc-be24-989204af3fd5/collection/27630415-e22c625a-6e2b-478f-9b8c-0c4e77005ad8?action=share&source=collection_link&creator=27630415"
	},
	"item": [
		{
			"name": "Happy Path - D",
			"item": [
				{
					"name": "Happy Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"corporateName is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"corporateName\")).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"cnpj is a valid CNPJ format\", function () {\r",
									"    const cnpjRegex = /^\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}-\\d{2}$/;\r",
									"    pm.expect(pm.environment.get(\"cnpj\")).to.match(cnpjRegex);\r",
									"});\r",
									"\r",
									"pm.test(\"email is a valid email format\", function () {\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    pm.expect(pm.environment.get(\"email\")).to.match(emailRegex);\r",
									"});\r",
									"\r",
									"pm.test(\"matriz is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"matriz\")).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"responsibleContact is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"responsibleContact\")).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"telephone is a valid phone number format\", function () {\r",
									"    const phoneRegex = /^\\d{14}$/;\r",
									"    pm.expect(pm.environment.get(\"telephone\")).to.match(phoneRegex);\r",
									"});\r",
									"\r",
									"pm.test(\"serviceDescription is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"serviceDescription\")).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"zipCode is a valid ZIP code format\", function () {\r",
									"    const zipCodeRegex = /^\\d{8}$/;\r",
									"    pm.expect(pm.environment.get(\"zipCode\")).to.match(zipCodeRegex);\r",
									"});\r",
									"\r",
									"pm.test(\"state is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"state\")).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"city is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"city\")).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"district is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"district\")).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"street is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"street\")).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"number is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"number\")).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"complement is not empty\", function () {\r",
									"    pm.expect(pm.environment.get(\"complement\")).to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01- Corporate Name - D",
			"item": [
				{
					"name": "empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"  \",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "alphanumeric",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \" Alpha 123 \",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "capital letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"LETRAS MAIUSCULA\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "small letter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \" letra minuscula \",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "small letters and capital letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \" LETRA letra\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "letters and characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"Letra %$\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "only  numbers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"12345\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "compound name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \" Nome Composto\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "09-no duplicity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"Nome Composto\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "10-100  characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"cemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaract\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "11- 101 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"cemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaract1\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "12-01 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"1\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "in",
						"value": "query",
						"type": "string"
					},
					{
						"key": "value",
						"value": "{{Token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "RegisterCompany - D",
			"item": [
				{
					"name": "01-empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \" \",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "02-only numbers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "03-no duplicity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"00232268053300\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "04-14 digits",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"100232268053300\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Lista de prefixos e sufixos fictícios para o Corporate Name",
							"const prefixos = ['Global', 'Tech', 'Inova', 'Master'];",
							"const sufixos = ['Corp', 'Solutions', 'Group', 'International'];",
							"",
							"// Função para gerar valor aleatório de uma lista",
							"function gerarValorAleatorio(lista) {",
							"    const indiceAleatorio = Math.floor(Math.random() * lista.length);",
							"    return lista[indiceAleatorio];",
							"}",
							"",
							"// Função para gerar valor para o campo \"Corporate Name\"",
							"function gerarValorParaCorporateName() {",
							"    const prefixoAleatorio = gerarValorAleatorio(prefixos);",
							"    const sufixoAleatorio = gerarValorAleatorio(sufixos);",
							"    return `${prefixoAleatorio} ${sufixoAleatorio}`;",
							"}",
							"",
							"// Chama a função para gerar o valor",
							"const corporateNameGerado = gerarValorParaCorporateName();",
							"",
							"// Define a variável de ambiente 'corporateName' com o valor gerado",
							"pm.environment.set('corporateName', corporateNameGerado);",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`Corporate Name Gerado: ${corporateNameGerado}`);",
							"",
							"// Função para gerar um e-mail aleatório com formato específico",
							"function gerarEmail() {",
							"    const nome = pm.variables.get(\"FirstName\").toLowerCase() + pm.variables.get(\"LastName\").toLowerCase();",
							"    const dominio = pm.variables.get(\"Domain\");",
							"    return `${nome}@${dominio}`;",
							"}",
							"",
							"// Define a variável de ambiente 'Email' com o valor gerado",
							"pm.environment.set(\"Email\", gerarEmail());",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`E-mail Gerado: ${pm.environment.get(\"Email\")}`);",
							"",
							"// Função para gerar um número aleatório entre min e max (inclusive)",
							"function gerarNumeroAleatorio(min, max) {",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "03-Matriz - D",
			"item": [
				{
					"name": "01-empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \" \",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "02-alphanumeric",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"Alfa 123\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "03-capital letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"MAISCULA\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "04-small letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"minuscula\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "05-small letters and capital letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"aaa AAA\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "06-letters and characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"AAA &&$\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "07- only numbers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"12352\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "08-compound name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"aaa AAA\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "09-no duplicity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"aaa AAA\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "10- 100  characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"cemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaract\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "11- 101  characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"cemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaract1\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "12-  01 character",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"1\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "in",
						"value": "query",
						"type": "string"
					},
					{
						"key": "value",
						"value": "{{Token}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "token",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Lista de prefixos e sufixos fictícios para o Corporate Name",
							"const prefixos = ['Global', 'Tech', 'Inova', 'Master'];",
							"const sufixos = ['Corp', 'Solutions', 'Group', 'International'];",
							"",
							"// Função para gerar valor aleatório de uma lista",
							"function gerarValorAleatorio(lista) {",
							"    const indiceAleatorio = Math.floor(Math.random() * lista.length);",
							"    return lista[indiceAleatorio];",
							"}",
							"",
							"// Função para gerar valor para o campo \"Corporate Name\"",
							"function gerarValorParaCorporateName() {",
							"    const prefixoAleatorio = gerarValorAleatorio(prefixos);",
							"    const sufixoAleatorio = gerarValorAleatorio(sufixos);",
							"    return `${prefixoAleatorio} ${sufixoAleatorio}`;",
							"}",
							"",
							"// Chama a função para gerar o valor",
							"const corporateNameGerado = gerarValorParaCorporateName();",
							"",
							"// Define a variável de ambiente 'corporateName' com o valor gerado",
							"pm.environment.set('corporateName', corporateNameGerado);",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`Corporate Name Gerado: ${corporateNameGerado}`);",
							"",
							"// Função para gerar um e-mail aleatório com formato específico",
							"function gerarEmail() {",
							"    const nome = pm.variables.get(\"FirstName\").toLowerCase() + pm.variables.get(\"LastName\").toLowerCase();",
							"    const dominio = pm.variables.get(\"Domain\");",
							"    return `${nome}@${dominio}`;",
							"}",
							"",
							"// Define a variável de ambiente 'Email' com o valor gerado",
							"pm.environment.set(\"Email\", gerarEmail());",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`E-mail Gerado: ${pm.environment.get(\"Email\")}`);",
							"",
							"// Função para gerar um número aleatório entre min e max (inclusive)",
							"function gerarNumeroAleatorio(min, max) {",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "04-ResponsibleContact - D",
			"item": [
				{
					"name": "01-empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \" \",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "02-alphanumeric",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"Alfa 123\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "03-capital letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"MMMMMM\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "04-small letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"sss\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "05-small and capital letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"AAAaaa\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "06-letters and characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"letra $$$\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "07-only numbers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"123545\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "08- compound name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"nome composto\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "09-100  characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \" cemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaract\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "10-101  characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{ cemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaracterescemcaract1\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Lista de prefixos e sufixos fictícios para o Corporate Name",
							"const prefixos = ['Global', 'Tech', 'Inova', 'Master'];",
							"const sufixos = ['Corp', 'Solutions', 'Group', 'International'];",
							"",
							"// Função para gerar valor aleatório de uma lista",
							"function gerarValorAleatorio(lista) {",
							"    const indiceAleatorio = Math.floor(Math.random() * lista.length);",
							"    return lista[indiceAleatorio];",
							"}",
							"",
							"// Função para gerar valor para o campo \"Corporate Name\"",
							"function gerarValorParaCorporateName() {",
							"    const prefixoAleatorio = gerarValorAleatorio(prefixos);",
							"    const sufixoAleatorio = gerarValorAleatorio(sufixos);",
							"    return `${prefixoAleatorio} ${sufixoAleatorio}`;",
							"}",
							"",
							"// Chama a função para gerar o valor",
							"const corporateNameGerado = gerarValorParaCorporateName();",
							"",
							"// Define a variável de ambiente 'corporateName' com o valor gerado",
							"pm.environment.set('corporateName', corporateNameGerado);",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`Corporate Name Gerado: ${corporateNameGerado}`);",
							"",
							"// Função para gerar um e-mail aleatório com formato específico",
							"function gerarEmail() {",
							"    const nome = pm.variables.get(\"FirstName\").toLowerCase() + pm.variables.get(\"LastName\").toLowerCase();",
							"    const dominio = pm.variables.get(\"Domain\");",
							"    return `${nome}@${dominio}`;",
							"}",
							"",
							"// Define a variável de ambiente 'Email' com o valor gerado",
							"pm.environment.set(\"Email\", gerarEmail());",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`E-mail Gerado: ${pm.environment.get(\"Email\")}`);",
							"",
							"// Função para gerar um número aleatório entre min e max (inclusive)",
							"function gerarNumeroAleatorio(min, max) {",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "08-Address- district - D",
			"item": [
				{
					"name": "01-empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \" \",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "02-special character",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \" fad$#\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "03-01 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"JHº\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "04-50  characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"cemcaracterescemcaracterescemcaracterescemcaract50\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "05-51 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"cemcaracterescemcaracterescemcaracterescemcaract251\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "06-small and capital letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"AAA aaa\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "07-alphanumeric",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"AAA 555\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Lista de prefixos e sufixos fictícios para o Corporate Name",
							"const prefixos = ['Global', 'Tech', 'Inova', 'Master'];",
							"const sufixos = ['Corp', 'Solutions', 'Group', 'International'];",
							"",
							"// Função para gerar valor aleatório de uma lista",
							"function gerarValorAleatorio(lista) {",
							"    const indiceAleatorio = Math.floor(Math.random() * lista.length);",
							"    return lista[indiceAleatorio];",
							"}",
							"",
							"// Função para gerar valor para o campo \"Corporate Name\"",
							"function gerarValorParaCorporateName() {",
							"    const prefixoAleatorio = gerarValorAleatorio(prefixos);",
							"    const sufixoAleatorio = gerarValorAleatorio(sufixos);",
							"    return `${prefixoAleatorio} ${sufixoAleatorio}`;",
							"}",
							"",
							"// Chama a função para gerar o valor",
							"const corporateNameGerado = gerarValorParaCorporateName();",
							"",
							"// Define a variável de ambiente 'corporateName' com o valor gerado",
							"pm.environment.set('corporateName', corporateNameGerado);",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`Corporate Name Gerado: ${corporateNameGerado}`);",
							"",
							"// Função para gerar um e-mail aleatório com formato específico",
							"function gerarEmail() {",
							"    const nome = pm.variables.get(\"FirstName\").toLowerCase() + pm.variables.get(\"LastName\").toLowerCase();",
							"    const dominio = pm.variables.get(\"Domain\");",
							"    return `${nome}@${dominio}`;",
							"}",
							"",
							"// Define a variável de ambiente 'Email' com o valor gerado",
							"pm.environment.set(\"Email\", gerarEmail());",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`E-mail Gerado: ${pm.environment.get(\"Email\")}`);",
							"",
							"// Função para gerar um número aleatório entre min e max (inclusive)",
							"function gerarNumeroAleatorio(min, max) {",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "09-Number - D",
			"item": [
				{
					"name": "empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \" \",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "01 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"1\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "10 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "11 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"12345678901\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "only numbers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \" AAA\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Lista de prefixos e sufixos fictícios para o Corporate Name",
							"const prefixos = ['Global', 'Tech', 'Inova', 'Master'];",
							"const sufixos = ['Corp', 'Solutions', 'Group', 'International'];",
							"",
							"// Função para gerar valor aleatório de uma lista",
							"function gerarValorAleatorio(lista) {",
							"    const indiceAleatorio = Math.floor(Math.random() * lista.length);",
							"    return lista[indiceAleatorio];",
							"}",
							"",
							"// Função para gerar valor para o campo \"Corporate Name\"",
							"function gerarValorParaCorporateName() {",
							"    const prefixoAleatorio = gerarValorAleatorio(prefixos);",
							"    const sufixoAleatorio = gerarValorAleatorio(sufixos);",
							"    return `${prefixoAleatorio} ${sufixoAleatorio}`;",
							"}",
							"",
							"// Chama a função para gerar o valor",
							"const corporateNameGerado = gerarValorParaCorporateName();",
							"",
							"// Define a variável de ambiente 'corporateName' com o valor gerado",
							"pm.environment.set('corporateName', corporateNameGerado);",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`Corporate Name Gerado: ${corporateNameGerado}`);",
							"",
							"// Função para gerar um e-mail aleatório com formato específico",
							"function gerarEmail() {",
							"    const nome = pm.variables.get(\"FirstName\").toLowerCase() + pm.variables.get(\"LastName\").toLowerCase();",
							"    const dominio = pm.variables.get(\"Domain\");",
							"    return `${nome}@${dominio}`;",
							"}",
							"",
							"// Define a variável de ambiente 'Email' com o valor gerado",
							"pm.environment.set(\"Email\", gerarEmail());",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`E-mail Gerado: ${pm.environment.get(\"Email\")}`);",
							"",
							"// Função para gerar um número aleatório entre min e max (inclusive)",
							"function gerarNumeroAleatorio(min, max) {",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "10-Complement - D",
			"item": [
				{
					"name": "01-empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \" \",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "02-special character",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"$}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "03- 01 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"º\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "04- 80  characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"oitentaoitentaoitentaoitentaoitentaoitentaoitentaoitentaoitentaoitentaoitentaoit\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "05-81 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"oitentaoitentaoitentaoitentaoitentaoitentaoitentaoitentaoitentaoitentaoitentaoit1\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "06-small letters and capital letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"AAAaaa\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "07- alphanumeric",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"AAA 111\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "teste cnpj",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Lista de prefixos e sufixos fictícios para o Corporate Name",
							"const prefixos = ['Global', 'Tech', 'Inova', 'Master'];",
							"const sufixos = ['Corp', 'Solutions', 'Group', 'International'];",
							"",
							"// Função para gerar valor aleatório de uma lista",
							"function gerarValorAleatorio(lista) {",
							"    const indiceAleatorio = Math.floor(Math.random() * lista.length);",
							"    return lista[indiceAleatorio];",
							"}",
							"",
							"// Função para gerar valor para o campo \"Corporate Name\"",
							"function gerarValorParaCorporateName() {",
							"    const prefixoAleatorio = gerarValorAleatorio(prefixos);",
							"    const sufixoAleatorio = gerarValorAleatorio(sufixos);",
							"    return `${prefixoAleatorio} ${sufixoAleatorio}`;",
							"}",
							"",
							"// Chama a função para gerar o valor",
							"const corporateNameGerado = gerarValorParaCorporateName();",
							"",
							"// Define a variável de ambiente 'corporateName' com o valor gerado",
							"pm.environment.set('corporateName', corporateNameGerado);",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`Corporate Name Gerado: ${corporateNameGerado}`);",
							"",
							"// Função para gerar um e-mail aleatório com formato específico",
							"function gerarEmail() {",
							"    const nome = pm.variables.get(\"FirstName\").toLowerCase() + pm.variables.get(\"LastName\").toLowerCase();",
							"    const dominio = pm.variables.get(\"Domain\");",
							"    return `${nome}@${dominio}`;",
							"}",
							"",
							"// Define a variável de ambiente 'Email' com o valor gerado",
							"pm.environment.set(\"Email\", gerarEmail());",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`E-mail Gerado: ${pm.environment.get(\"Email\")}`);",
							"",
							"// Função para gerar um número aleatório entre min e max (inclusive)",
							"function gerarNumeroAleatorio(min, max) {",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "13- State - D",
			"item": [
				{
					"name": "01-empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \" \",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "02-special character",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \" s$\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "03- 01 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"S\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "04-2 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"SD\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "05- 3 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"SDF\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "06-small  and capital letters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									"\r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									"\r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									"\r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									"\r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									"\r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									"\r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									"\r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									"\r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									"\r",
									"\r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									"\r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									"\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"\r",
									"    return cnpj;\r",
									"}\r",
									"\r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									"\r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									"\r",
									"\r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									"\r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									"\r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									"\r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"\r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									"\r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									"\r",
									"\r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									"\r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									"\r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									"\r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									"\r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									"\r",
									"    return telephone;\r",
									"}\r",
									"\r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									"\r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									"\r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									"\r",
									"    return zipCode;\r",
									"}\r",
									"\r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									"\r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"        \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									"\r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									"\r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									"\r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									"\r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									"\r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									"\r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									"\r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									"\r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									"\r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									"\r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									"\r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"Sa\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "07-only numbers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"22\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Lista de prefixos e sufixos fictícios para o Corporate Name",
							"const prefixos = ['Global', 'Tech', 'Inova', 'Master'];",
							"const sufixos = ['Corp', 'Solutions', 'Group', 'International'];",
							"",
							"// Função para gerar valor aleatório de uma lista",
							"function gerarValorAleatorio(lista) {",
							"    const indiceAleatorio = Math.floor(Math.random() * lista.length);",
							"    return lista[indiceAleatorio];",
							"}",
							"",
							"// Função para gerar valor para o campo \"Corporate Name\"",
							"function gerarValorParaCorporateName() {",
							"    const prefixoAleatorio = gerarValorAleatorio(prefixos);",
							"    const sufixoAleatorio = gerarValorAleatorio(sufixos);",
							"    return `${prefixoAleatorio} ${sufixoAleatorio}`;",
							"}",
							"",
							"// Chama a função para gerar o valor",
							"const corporateNameGerado = gerarValorParaCorporateName();",
							"",
							"// Define a variável de ambiente 'corporateName' com o valor gerado",
							"pm.environment.set('corporateName', corporateNameGerado);",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`Corporate Name Gerado: ${corporateNameGerado}`);",
							"",
							"// Função para gerar um e-mail aleatório com formato específico",
							"function gerarEmail() {",
							"    const nome = pm.variables.get(\"FirstName\").toLowerCase() + pm.variables.get(\"LastName\").toLowerCase();",
							"    const dominio = pm.variables.get(\"Domain\");",
							"    return `${nome}@${dominio}`;",
							"}",
							"",
							"// Define a variável de ambiente 'Email' com o valor gerado",
							"pm.environment.set(\"Email\", gerarEmail());",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`E-mail Gerado: ${pm.environment.get(\"Email\")}`);",
							"",
							"// Função para gerar um número aleatório entre min e max (inclusive)",
							"function gerarNumeroAleatorio(min, max) {",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "15-zipCode -D",
			"item": [
				{
					"name": "01-empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \" \",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "02-only numbers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "03- 8 digits",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"12345678\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "04- 9 digits",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Teste para o novo cadastro de empresa\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"123456789\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "05- validador ?",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Gerar corporateName, matriz e email\r",
									"function generateCorporateName() {\r",
									"    const firstPart = [\r",
									"        \"Tech\", \"Global\", \"Prime\", \"Future\", \"Vision\",\r",
									"        \"Elite\", \"Star\", \"Nova\", \"Quantum\", \"Solar\",\r",
									"        \"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\",\r",
									"        \"Ocean\", \"Mountain\", \"River\", \"Sky\", \"Forest\"\r",
									"    ];\r",
									" \r",
									"    const secondPart = [\r",
									"        \"Solutions\", \"Systems\", \"Dynamics\", \"Innovations\", \"Concepts\",\r",
									"        \"Designs\", \"Technologies\", \"Services\", \"Networks\", \"Logistics\",\r",
									"        \"Hub\", \"Point\", \"Edge\", \"Line\", \"Wave\",\r",
									"        \"Field\", \"Node\", \"Link\", \"Portal\", \"Platform\"\r",
									"    ];\r",
									" \r",
									"    const thirdPart = [\r",
									"        \"Matriz\", \"Grupo\", \"Associados\", \"Holdings\", \"International\",\r",
									"        \"Corporation\", \"Limited\", \"Institute\", \"Union\", \"Partners\",\r",
									"        \"Foundation\", \"Center\", \"Consultants\", \"Experts\", \"Masters\",\r",
									"        \"Creators\", \"Builders\", \"Pioneers\", \"Leaders\", \"Innovators\"\r",
									"    ];\r",
									" \r",
									"    const emailDomains = [\r",
									"        \"@example.com\", \"@mail.com\", \"@business.com\", \"@corporate.com\",\r",
									"        \"@enterprise.com\", \"@company.com\", \"@industry.com\", \"@commerce.com\",\r",
									"        \"@firm.com\", \"@professional.com\"\r",
									"    ];\r",
									" \r",
									"    const name1 = firstPart[Math.floor(Math.random() * firstPart.length)];\r",
									"    const name2 = secondPart[Math.floor(Math.random() * secondPart.length)];\r",
									" \r",
									"    let corporateName = `${name1} ${name2}`;\r",
									"    let matriz = `${corporateName} ${thirdPart[Math.floor(Math.random() * thirdPart.length)]}`;\r",
									" \r",
									"    // Escolhendo um domínio de e-mail aleatoriamente\r",
									"    let emailDomain = emailDomains[Math.floor(Math.random() * emailDomains.length)];\r",
									"    let email = `${corporateName.replace(/\\s+/g, '').toLowerCase()}${emailDomain}`;\r",
									" \r",
									"    return { corporateName, matriz, email };\r",
									"}\r",
									" \r",
									"let { corporateName, matriz, email } = generateCorporateName();\r",
									"pm.environment.set(\"corporateName\", corporateName);\r",
									"pm.environment.set(\"matriz\", matriz);\r",
									"pm.environment.set(\"email\", email);\r",
									" \r",
									" \r",
									"/*function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"function formatCNPJ(cnpj) {\r",
									"    return cnpj.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"let formattedCNPJ = formatCNPJ(cnpj);\r",
									"pm.environment.set(\"cnpj\", formattedCNPJ);*/\r",
									" \r",
									"//Criar CNPJ da empresa\r",
									"function generateCNPJ() {\r",
									"    let cnpj = '';\r",
									"    for (let i = 1; i <= 12; i++) {\r",
									"        cnpj += Math.floor(Math.random() * 9).toString();\r",
									"    }\r",
									" \r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									"    cnpj += calculateVerificationDigit(cnpj);\r",
									" \r",
									"    return cnpj;\r",
									"}\r",
									" \r",
									"function calculateVerificationDigit(cnpj) {\r",
									"    let size = cnpj.length - 12;\r",
									"    let numbers = cnpj.substring(0, size);\r",
									"    let digits = cnpj.substring(size);\r",
									"    let sum = 0;\r",
									"    let pos = size - 7;\r",
									"    for (let i = size; i >= 1; i--) {\r",
									"        sum += numbers.charAt(size - i) * pos--;\r",
									"        if (pos < 2) pos = 9;\r",
									"    }\r",
									"    let result = sum % 11 < 2 ? 0 : 11 - sum % 11;\r",
									"    return result.toString();\r",
									"}\r",
									" \r",
									"let cnpj = generateCNPJ();\r",
									"pm.environment.set(\"cnpj\", cnpj);\r",
									" \r",
									" \r",
									"//Criar nome do responsável da empresa (responsibleContact)\r",
									" \r",
									"function generateResponsibleContact() {\r",
									"    const firstNames = [\r",
									"        \"Ana\", \"Beatriz\", \"Carlos\", \"Daniel\", \"Eduardo\",\r",
									"        \"Fernanda\", \"Gabriel\", \"Helena\", \"Isabela\", \"João\",\r",
									"        \"Karina\", \"Lucas\", \"Mariana\", \"Nícolas\", \"Olívia\",\r",
									"        \"Paulo\", \"Rafael\", \"Sofia\", \"Tiago\", \"Vitória\"\r",
									"    ];\r",
									" \r",
									"    const lastNames = [\r",
									"        \"Silva\", \"Santos\", \"Oliveira\", \"Souza\", \"Rodrigues\",\r",
									"        \"Ferreira\", \"Almeida\", \"Costa\", \"Gomes\", \"Martins\",\r",
									"        \"Araújo\", \"Pereira\", \"Ribeiro\", \"Carvalho\", \"Mendes\",\r",
									"        \"Barbosa\", \"Lima\", \"Correia\", \"Dias\", \"Rocha\"\r",
									"    ];\r",
									" \r",
									"    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									" \r",
									"    return `${firstName} ${lastName}`;\r",
									"}\r",
									" \r",
									"let responsibleContact = generateResponsibleContact();\r",
									"pm.environment.set(\"responsibleContact\", responsibleContact);\r",
									" \r",
									" \r",
									"//Criar a Descrição do tipo de serviços\r",
									"function generateServiceDescription() {\r",
									"    const services = [\r",
									"        \"Telecomunicações\", \"Cafeteria\", \"Imagem e Som\", \"Consultoria Financeira\",\r",
									"        \"Desenvolvimento de Software\", \"Marketing Digital\", \"E-commerce\",\r",
									"        \"Gestão de Recursos Humanos\", \"Logística e Transportes\", \"Saúde e Bem-Estar\",\r",
									"        \"Educação e Treinamento\", \"Arquitetura e Design de Interiores\",\r",
									"        \"Serviços Jurídicos\", \"Turismo e Hospedagem\", \"Gastronomia e Restaurantes\",\r",
									"        \"Construção Civil\", \"Agricultura e Pecuária\", \"Varejo e Atendimento ao Consumidor\",\r",
									"        \"Artes e Entretenimento\", \"Manutenção e Serviços Gerais\"\r",
									"    ];\r",
									" \r",
									"    const serviceDescription = services[Math.floor(Math.random() * services.length)];\r",
									"    return serviceDescription;\r",
									"}\r",
									" \r",
									"let serviceDescription = generateServiceDescription();\r",
									"pm.environment.set(\"serviceDescription\", serviceDescription);\r",
									" \r",
									"//Criar telefone\r",
									"function generateTelephone() {\r",
									"    let telephone = '';\r",
									" \r",
									"    for (let i = 0; i < 14; i++) {\r",
									"        telephone += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return telephone;\r",
									"}\r",
									" \r",
									"let telephone = generateTelephone();\r",
									"pm.environment.set(\"telephone\", telephone);\r",
									" \r",
									"//Criar cep\r",
									"function generateZipCode() {\r",
									"    let zipCode = '';\r",
									" \r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        zipCode += Math.floor(Math.random() * 10).toString(); // Gera um dígito aleatório de 0 a 9\r",
									"    }\r",
									" \r",
									"    return zipCode;\r",
									"}\r",
									" \r",
									"let zipCode = generateZipCode();\r",
									"pm.environment.set(\"zipCode\", zipCode);\r",
									" \r",
									"//Criar Cidade e Estado, Bairro e Rua\r",
									"function generateLocationData() {\r",
									"    const locationData = {\r",
									"        \"SP\": {\r",
									"            \"São Paulo\": {\r",
									"                \"districts\": [\"Vila Mariana\", \"Pinheiros\", \"Moema\", \"Tatuapé\", \"Santana\"],\r",
									"                \"streets\": [\"Rua Augusta\", \"Av. Paulista\", \"Rua da Consolação\", \"Av. Brigadeiro Faria Lima\", \"Rua Haddock Lobo\"]\r",
									"            },\r",
									"            \"Campinas\": {\r",
									"                \"districts\": [\"Cambuí\", \"Taquaral\", \"Barão Geraldo\", \"Nova Campinas\", \"Sousas\"],\r",
									"                \"streets\": [\"Rua José Paulino\", \"Av Aquidaban\", \"Rua Barreto Leme\", \"Av Orozimbo Maia\", \"Rua Dr Moraes Sales\"]\r",
									"            },\r",
									"        },\r",
									"        \"RJ\": {\r",
									"            \"Rio de Janeiro\": {\r",
									"                \"districts\": [\"Copacabana\", \"Leblon\", \"Ipanema\", \"Botafogo\", \"Flamengo\"],\r",
									"                \"streets\": [\"Av Atlântica\", \"Rua Visconde de Pirajá\", \"Av Nossa Sra. de Copacabana\", \"Rua Barata Ribeiro\", \"Rua Farme de Amoedo\"]\r",
									"            },\r",
									"            \"Niterói\": {\r",
									"                \"districts\": [\"Icaraí\", \"São Francisco\", \"Charitas\", \"Santa Rosa\", \"Itaipu\"],\r",
									"                \"streets\": [\"Rua Gavião Peixoto\", \"Av Quintino Bocaiúva\", \"Rua Mem de Sá\", \"Rua Mariz e Barros\", \"Rua Lopes Trovão\"]\r",
									"            },\r",
									"        },\r",
									"     \"MG\": {\r",
									"            \"Belo Horizonte\": {\r",
									"                \"districts\": [\"Pampulha\", \"Savassi\", \"Lourdes\", \"Venda Nova\", \"Barreiro\"],\r",
									"                \"streets\": [\"Av Afonso Pena\", \"Rua da Bahia\", \"Av Amazonas\", \"Rua Guaicuí\", \"Av do Contorno\"]\r",
									"            },\r",
									"            \"Uberlândia\": {\r",
									"                \"districts\": [\"Santa Mônica\", \"Fundinho\", \"Cidade Jardim\", \"Brasil\", \"Umuarama\"],\r",
									"                \"streets\": [\"Av Rondon Pacheco\", \"Av João Naves de Ávila\", \"Rua Olegário Maciel\", \"Av Floriano Peixoto\", \"Rua Duque de Caxias\"]\r",
									"            },\r",
									"        },\r",
									"        \"BA\": {\r",
									"            \"Salvador\": {\r",
									"                \"districts\": [\"Barra\", \"Pituba\", \"Itapuã\", \"Brotas\", \"Caminho das Árvores\"],\r",
									"                \"streets\": [\"Av Sete de Setembro\", \"Av ACM\", \"Av Paralela\", \"Rua das Hortênsias\", \"Rua Marquês de Caravelas\"]\r",
									"            },\r",
									"            \"Feira de Santana\": {\r",
									"                \"districts\": [\"Centro\", \"Santa Mônica\", \"Capuchinhos\", \"Cidade Nova\", \"Kalilândia\"],\r",
									"                \"streets\": [\"Rua JJ Seabra\", \"Av Getúlio Vargas\", \"Rua Marechal Deodoro\", \"Rua Carlos Valadares\", \"Rua Barão de Cotegipe\"]\r",
									"            },\r",
									"        },\r",
									"        \"PR\": {\r",
									"            \"Curitiba\": {\r",
									"                \"districts\": [\"Batel\", \"Centro\", \"Alto da XV\", \"Água Verde\", \"Boa Vista\"],\r",
									"                \"streets\": [\"Av do Batel\", \"Rua XV de Novembro\", \"Rua Mateus Leme\", \"Av Iguaçu\", \"Rua Holanda\"]\r",
									"            },\r",
									"            \"Londrina\": {\r",
									"                \"districts\": [\"Centro\", \"Gleba Palhano\", \"Jardim Higienópolis\", \"Terra Bonita\", \"Jardim Shangri-La\"],\r",
									"                \"streets\": [\"Av Higienópolis\", \"Rua Paranaguá\", \"Av Maringá\", \"Rua Sergipe\", \"Av Tiradentes\"]\r",
									"            },\r",
									"        }\r",
									"    };\r",
									" \r",
									"    // Escolhe um estado aleatoriamente\r",
									"    const states = Object.keys(locationData);\r",
									"    const randomState = states[Math.floor(Math.random() * states.length)];\r",
									" \r",
									"    // Escolhe uma cidade aleatoriamente dentro do estado selecionado\r",
									"    const cities = Object.keys(locationData[randomState]);\r",
									"    const randomCity = cities[Math.floor(Math.random() * cities.length)];\r",
									" \r",
									"    // Escolhe um bairro e uma rua aleatoriamente dentro da cidade selecionada\r",
									"    const randomDistrict = locationData[randomState][randomCity].districts[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].districts.length)\r",
									"    ];\r",
									"    const randomStreet = locationData[randomState][randomCity].streets[\r",
									"        Math.floor(Math.random() * locationData[randomState][randomCity].streets.length)\r",
									"    ];\r",
									" \r",
									"    return { state: randomState, city: randomCity, district: randomDistrict, street: randomStreet };\r",
									"}\r",
									" \r",
									"let { state, city, district, street } = generateLocationData();\r",
									"pm.environment.set(\"state\", state);\r",
									"pm.environment.set(\"city\", city);\r",
									"pm.environment.set(\"district\", district);\r",
									"pm.environment.set(\"street\", street);\r",
									" \r",
									"//Gerar número aleatório\r",
									"function generateRandomNumber() {\r",
									"    const maxNumber = 9999999999; // Número máximo com 10 dígitos\r",
									"    return Math.floor(Math.random() * (maxNumber + 1)).toString(); // Gera um número aleatório entre 0 e 9999999999\r",
									"}\r",
									" \r",
									"let number = generateRandomNumber();\r",
									"pm.environment.set(\"number\", number);\r",
									" \r",
									"//Criar um complemento aleatório\r",
									"function generateAddressComplement() {\r",
									"    const complementTypes = [\"Apartamento\", \"Bloco\", \"Sala\", \"Lote\", \"Andar\"];\r",
									"    const complement = complementTypes[Math.floor(Math.random() * complementTypes.length)];\r",
									" \r",
									"    let complementNumber;\r",
									"    if (complement === \"Bloco\") {\r",
									"        // Para \"Bloco\", usar letras\r",
									"        const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"        complementNumber = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } else {\r",
									"        // Para os outros tipos, usar números\r",
									"        complementNumber = Math.floor(Math.random() * 100).toString();\r",
									"    }\r",
									" \r",
									"    return `${complement} ${complementNumber}`;\r",
									"}\r",
									" \r",
									"let complement = generateAddressComplement();\r",
									"pm.environment.set(\"complement\", complement);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtém o valor do zipCode da resposta\r",
									"const zipCode = pm.response.json().address[0].zipCode;\r",
									"\r",
									"// Define um padrão de expressão regular para validar o formato esperado\r",
									"const zipCodePattern = /^\\d{5}-\\d{3}$/;\r",
									"\r",
									"// Testa se o zipCode atende ao padrão\r",
									"pm.test(\"Validar o formato do zipCode\", function () {\r",
									"    pm.expect(zipCode).to.match(zipCodePattern);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"{{email}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{zipCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"{{district}}\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/company/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"company",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Lista de prefixos e sufixos fictícios para o Corporate Name",
							"const prefixos = ['Global', 'Tech', 'Inova', 'Master'];",
							"const sufixos = ['Corp', 'Solutions', 'Group', 'International'];",
							"",
							"// Função para gerar valor aleatório de uma lista",
							"function gerarValorAleatorio(lista) {",
							"    const indiceAleatorio = Math.floor(Math.random() * lista.length);",
							"    return lista[indiceAleatorio];",
							"}",
							"",
							"// Função para gerar valor para o campo \"Corporate Name\"",
							"function gerarValorParaCorporateName() {",
							"    const prefixoAleatorio = gerarValorAleatorio(prefixos);",
							"    const sufixoAleatorio = gerarValorAleatorio(sufixos);",
							"    return `${prefixoAleatorio} ${sufixoAleatorio}`;",
							"}",
							"",
							"// Chama a função para gerar o valor",
							"const corporateNameGerado = gerarValorParaCorporateName();",
							"",
							"// Define a variável de ambiente 'corporateName' com o valor gerado",
							"pm.environment.set('corporateName', corporateNameGerado);",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`Corporate Name Gerado: ${corporateNameGerado}`);",
							"",
							"// Função para gerar um e-mail aleatório com formato específico",
							"function gerarEmail() {",
							"    const nome = pm.variables.get(\"FirstName\").toLowerCase() + pm.variables.get(\"LastName\").toLowerCase();",
							"    const dominio = pm.variables.get(\"Domain\");",
							"    return `${nome}@${dominio}`;",
							"}",
							"",
							"// Define a variável de ambiente 'Email' com o valor gerado",
							"pm.environment.set(\"Email\", gerarEmail());",
							"",
							"// Imprime o valor no console (opcional)",
							"console.log(`E-mail Gerado: ${pm.environment.get(\"Email\")}`);",
							"",
							"// Função para gerar um número aleatório entre min e max (inclusive)",
							"function gerarNumeroAleatorio(min, max) {",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;",
							"}",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "in",
				"value": "query",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{Token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}